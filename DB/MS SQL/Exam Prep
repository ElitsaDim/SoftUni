CREATE DATABASE [WMC]

USE [WMC] 

CREATE TABLE [Clients](
	[ClientId] INT PRIMARY KEY IDENTITY,
	[FirstName] VARCHAR(50) NOT NULL,
	[LastName] VARCHAR(50) NOT NULL,
	[Phone] CHAR(12) NOT NULL
	CHECK (LEN([Phone]) = 12)
)

CREATE TABLE [Mechanics](
MechanicId INT PRIMARY KEY IDENTITY NOT NULL,
FirstName VARCHAR(50) NOT NULL,
LastName VARCHAR(50) NOT NULL,
Address VARCHAR(255) NOT NULL
)

CREATE TABLE Models (
ModelId INT PRIMARY KEY IDENTITY,
Name VARCHAR(50) UNIQUE NOT NULL
)

CREATE TABLE Jobs(
JobId INT PRIMARY KEY IDENTITY,
ModelId INT FOREIGN KEY REFERENCES Models(ModelId) NOT NULL,
[Status] VARCHAR(11) NOT NULL DEFAULT('Pending'),
ClientId INT FOREIGN KEY REFERENCES Clients(ClientId) NOT NULL,
MechanicId INT FOREIGN KEY REFERENCES Mechanics(MechanicId),
IssueDate DATE NOT NULL,
FinishDate DATE,
CHECK ([Status] IN ('Pending', 'In Progress', 'Finished'))
)

CREATE TABLE Orders (
OrderId INT PRIMARY KEY IDENTITY NOT NULL,
JobId INT FOREIGN KEY REFERENCES Jobs(JobId) NOT NULL,
IssueDate DATE,
Delivered BIT NOT NULL DEFAULT(0)
)

CREATE TABLE Vendors(
VendorId INT PRIMARY KEY IDENTITY,
[Name] VARCHAR(50) UNIQUE NOT NULL
)

CREATE TABLE Parts(
PartId INT PRIMARY KEY IDENTITY,
SerialNumber VARCHAR(50) UNIQUE NOT NULL,
[Description] VARCHAR(255),
Price DECIMAL(6,2) NOT NULL
CHECK (Price > 0),
VendorId INT FOREIGN KEY REFERENCES Vendors(VendorId) NOT NULL,
StockQty INT NOT NULL DEFAULT (0)
CHECK(StockQty >= 0)
)

CREATE TABLE OrderParts(
OrderId INT FOREIGN KEY REFERENCES Orders(OrderId) NOT NULL,
PartId INT FOREIGN KEY REFERENCES Parts(PartId) NOT NULL,
Quantity INT NOT NULL DEFAULT (1),
PRIMARY KEY (OrderId, PartId),
CHECK (Quantity > 0)
)

CREATE TABLE PartsNeeded(
JobId INT FOREIGN KEY REFERENCES Jobs(JobId) NOT NULL,
PartId INT FOREIGN KEY REFERENCES Parts(PartId) NOT NULL,
Quantity INT NOT NULL DEFAULT (1),
PRIMARY KEY (JobId, PartId),
CHECK (Quantity > 0)
)

--2

INSERT INTO Clients (FirstName, LastName, Phone) VALUES
('Teri','Ennaco','570-889-5187'),
('Merlyn','Lawler','201-588-7810'),
('Georgene','Montezuma','925-615-5185'),
('Jettie','Mconnell','908-802-3564'),
('Lemuel','Latzke',	'631-748-6479'),
('Melodie','Knipp','805-690-1682'),
('Candida','Corbley','908-275-8357')

INSERT INTO Parts (SerialNumber,[Description],Price,VendorId) VALUES
('WP8182119','Door Boot Seal','117.86','2'),
('W10780048','Suspension Rod','42.81','1'),
('W10841140','Silicone Adhesive','6.77','4'),
('WPY055980','High Temperature Adhesive','13.94','3')

SELECT * FROM Mechanics
WHERE FirstName = 'Ryan' AND LastName = 'Harnos'

SELECT * FROM Jobs

--3

UPDATE Jobs
SET MechanicId = 3
WHERE [Status] = 'Pending'

UPDATE Jobs
SET [Status] = 'In Progress'
WHERE [Status] = 'Pending' AND MechanicId = 3

--4
DELETE FROM OrderParts
WHERE OrderId = 19

DELETE FROM Orders
WHERE OrderId = 19


--5
SELECT CONCAT(m.[FirstName], ' ', m.[LastName]) AS Mechanic, j.[Status], j.IssueDate FROM Mechanics AS m
LEFT JOIN Jobs AS j ON m.MechanicId = j.MechanicId
ORDER BY m.MechanicId, j.IssueDate, j.JobId

--6
SELECT CONCAT(c.[FirstName], ' ', c.[LastName]) AS Client, DATEDIFF(DAY, IssueDate, '2017-04-24') AS [Days going], j.[Status] FROM Clients AS c
LEFT JOIN Jobs AS j ON c.ClientId = j.ClientId 
WHERE [Status] IN ('In Progress', 'Pending')
ORDER BY [Days going] DESC, JobId ASC

--7

SELECT Mechanic, AVG([DaysWork]) FROM 
(
SELECT m.MechanicId, 
CONCAT (m.[FirstName], ' ', m.[LastName]) AS Mechanic, DATEDIFF(DAY, j.IssueDate, j.FinishDate) AS [DaysWork] FROM Mechanics AS m
LEFT JOIN Jobs AS j ON m.MechanicId = j.MechanicId
WHERE j.[Status] = 'Finished'
) [DaysWorkSubQ]
GROUP BY Mechanic, MechanicId
ORDER BY MechanicId

--8
SELECT * FROM Jobs

SELECT Available FROM (
SELECT m.MechanicId, CONCAT (m.[FirstName], ' ', m.[LastName]) AS Available FROM Mechanics AS m
LEFT JOIN [Jobs] AS j ON m.MechanicId = j.MechanicId
WHERE j.[Status] IS NULL OR j.[Status] = 'Finished') AS AvailableSubQ
GROUP BY Available, MechanicId
ORDER BY MechanicId ASC

--9

SELECT JobId, ISNULL(SUM (Price * Quantity), 0) AS Total FROM (
SELECT j.JobId, p.Price, op.Quantity FROM Jobs AS j
LEFT JOIN Orders AS o ON j.JobId = o.JobId
LEFT JOIN OrderParts AS op ON o.OrderId = op.OrderId
LEFT JOIN Parts AS p ON op.PartId = p.PartId
WHERE j.[Status] = 'Finished') AS Sub
GROUP BY JobId
ORDER BY Total DESC, JobId

--10

SELECT * FROM(
SELECT p.PartId, p.Description, pn.Quantity AS Required, p.StockQty AS [In Stock], ISNULL(op.Quantity,0) AS Ordered FROM Parts AS p
INNER JOIN PartsNeeded AS pn ON p.PartId = pn.PartId
INNER JOIN Jobs AS j ON pn.JobId = j.JobId
LEFT JOIN Orders AS o ON j.JobId = o.JobId
LEFT JOIN OrderParts AS op ON  o.OrderId = op.OrderId
WHERE j.[Status] != 'Finished' AND (o.Delivered = 0 OR o.Delivered IS NULL) 
) AS PartsSub
WHERE Required > [In Stock] + Ordered
ORDER BY PartId
--12
GO
CREATE FUNCTION udf_GetCost (@jobId INT)
RETURNS DECIMAL (8,2)
AS
BEGIN 
	DECLARE @totalCost DECIMAL (8,2)
	
	DECLARE @jobOrdersCount INT = 
	(SELECT COUNT(OrderId) FROM Jobs AS j
	LEFT JOIN Orders AS o ON j.JobId = o.JobId
	WHERE j.JobId = @jobId)
		
	IF @jobOrdersCount = 0
	BEGIN
		SET @totalCost = 0
	END

	ELSE
	BEGIN
		SET @totalCost = 
		(SELECT SUM(op.Quantity * p.Price) FROM Jobs AS j
		LEFT JOIN Orders AS o ON j.JobId = o.JobId
		LEFT JOIN OrderParts AS op ON o.OrderId = op.OrderId
		LEFT JOIN Parts AS p ON op.PartId = p.PartId
		WHERE j.JobId = @jobId)
	END
	RETURN @totalCost
END

GO




